# app.py

import streamlit as st
import os
import tempfile
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from streamlit_mermaid import st_mermaid # Import the mermaid component

# Set up the page configuration
st.set_page_config(layout="wide", page_title="Multi-Agent SDLC Manager")

# --- Introduction and API Key Configuration ---
st.title("Multi-Agent SDLC Manager ðŸ¤–")
st.markdown("This application helps you manage your software development lifecycle using multiple AI agents. Follow the tabs on the left to progress through the stages, from project planning to code generation.")

# Get OpenAI API Key from user
#with st.sidebar:
#   st.header("1. Configuration")
#   api_key = st.text_input("Enter your OpenAI API Key", type="password")
#   if api_key:
#       os.environ["OPENAI_API_KEY"] = api_key
#       st.success("API key set successfully!")
#   else:
#       st.warning("Please enter your OpenAI API key to proceed.")

# --- Session State Initialization ---
# This dictionary will store all the data generated by the app
if 'page' not in st.session_state:
    st.session_state.page = "Project Details"
if 'project_details' not in st.session_state:
    st.session_state.project_details = {}
if 'brd_content' not in st.session_state:
    st.session_state.brd_content = ""
if 'user_stories' not in st.session_state:
    st.session_state.user_stories = ""
if 'acceptance_criteria' not in st.session_state:
    st.session_state.acceptance_criteria = ""
if 'test_cases' not in st.session_state:
    st.session_state.test_cases = ""
if 'generated_code' not in st.session_state:
    st.session_state.generated_code = ""
if 'mermaid_script' not in st.session_state:
    st.session_state.mermaid_script = ""

# --- Agent and LLM Setup ---
def create_agent(system_prompt):
    """
    Creates a simple LLM agent using the specified system prompt.
    """
    if not os.getenv("OPENAI_API_KEY"):
        st.error("OpenAI API key is not set. Please configure it in the sidebar.")
        return None
    
    llm = ChatOpenAI(model="gpt-4o-mini")
    messages = [SystemMessage(content=system_prompt)]
    return llm, messages

def run_agent(llm, messages, user_content):
    """
    Runs the agent with the user's content and returns the response.
    """
    messages.append(HumanMessage(content=user_content))
    try:
        response = llm.invoke(messages)
        return response.content
    except Exception as e:
        st.error(f"Error calling the LLM: {e}")
        return None

# --- Main App Tabs/Navigation ---
# Use radio buttons in the sidebar for navigation
page = st.sidebar.radio(
    "2. Navigation",
    [
        "Project Details",
        "Upload BRD",
        "User Stories",
        "Acceptance Criteria",
        "Test Cases",
        "Code",
        "Architecture Diagram" # Added the new tab
    ],
    index=["Project Details", "Upload BRD", "User Stories", "Acceptance Criteria", "Test Cases", "Code", "Architecture Diagram"].index(st.session_state.page)
)
st.session_state.page = page

# --- Content for Each Tab ---

# Tab 1: Project Details
if page == "Project Details":
    st.header("Project Details")
    st.markdown("Enter the basic details for your new project.")
    
    # Text input fields for project details
    st.session_state.project_details["Project Name"] = st.text_input("Project Name", value=st.session_state.project_details.get("Project Name", ""))
    st.session_state.project_details["Client"] = st.text_input("Client", value=st.session_state.project_details.get("Client", ""))
    st.session_state.project_details["Product Owner"] = st.text_input("Product Owner", value=st.session_state.project_details.get("Product Owner", ""))
    st.session_state.project_details["Business Domain"] = st.text_input("Business Domain", value=st.session_state.project_details.get("Business Domain", ""))
    st.session_state.project_details["Project Manager"] = st.text_input("Project Manager", value=st.session_state.project_details.get("Project Manager", ""))
    st.session_state.project_details["Business Analyst"] = st.text_input("Business Analyst", value=st.session_state.project_details.get("Business Analyst", ""))
    st.session_state.project_details["Solutions Architect"] = st.text_input("Solutions Architect", value=st.session_state.project_details.get("Solutions Architect", ""))
    st.session_state.project_details["Start Date"] = st.date_input("Start Date", value=st.session_state.project_details.get("Start Date"))
    st.session_state.project_details["Planned End Date"] = st.date_input("Planned End Date", value=st.session_state.project_details.get("Planned End Date"))
    st.session_state.project_details["Budgeted Amount"] = st.number_input("Budgeted Amount", min_value=0, value=st.session_state.project_details.get("Budgeted Amount", 0))
    
    # Dropdown for programming language choices
    programming_language_options = ["Java", ".NET", "Python", "React.js"]
    st.session_state.project_details["Programming Language"] = st.selectbox(
        "Programming Language", 
        options=programming_language_options, 
        index=programming_language_options.index(st.session_state.project_details.get("Programming Language", "Python"))
    )

# Tab 2: Upload BRD
elif page == "Upload BRD":
    st.header("Upload Business Requirements Document (BRD)")
    st.markdown("Please upload your BRD as a `.txt` or `.md` file.")
    
    uploaded_file = st.file_uploader("Choose a file", type=["txt", "md"])
    if uploaded_file is not None:
        file_content = uploaded_file.getvalue().decode("utf-8")
        st.session_state.brd_content = file_content
        st.success("BRD uploaded successfully! You can now move to the 'User Stories' tab.")
        st.session_state.page = "User Stories"

# Tab 3: User Stories
elif page == "User Stories":
    st.header("Generate User Stories")
    if not st.session_state.brd_content:
        st.warning("Please upload a BRD in the 'Upload BRD' tab first.")
    else:
        st.markdown("The AI agent will now read your BRD and generate detailed user stories.")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Generate User Stories", disabled=not st.session_state.brd_content):
                with st.spinner("Generating user stories..."):
                    brd_text_for_prompt = st.session_state.brd_content[:3000] # Limit to avoid token issues
                    system_prompt = "You are a senior business analyst. Your task is to read a Business Requirements Document and generate a comprehensive list of detailed user stories. Each user story must follow the 'As a [user], I want to [goal], so that [reason]' format. Group related stories under clear headings."
                    llm, messages = create_agent(system_prompt)
                    if llm:
                        st.session_state.user_stories = run_agent(llm, messages, brd_text_for_prompt)
                        st.session_state.page = "Acceptance Criteria"

        if st.session_state.user_stories:
            st.subheader("Generated User Stories")
            st.text_area("User Stories", st.session_state.user_stories, height=500)
            
            with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as temp_file:
                temp_file.write(st.session_state.user_stories)
                temp_file_path = temp_file.name

            st.download_button(
                label="Download User Stories",
                data=open(temp_file_path, "rb").read(),
                file_name="user_stories.txt",
                mime="text/plain"
            )

# Tab 4: Acceptance Criteria
elif page == "Acceptance Criteria":
    st.header("Generate Acceptance Criteria")
    if not st.session_state.user_stories:
        st.warning("Please generate user stories in the previous tab first.")
    else:
        st.markdown("The AI agent will now generate acceptance criteria for the user stories.")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Generate Acceptance Criteria", disabled=not st.session_state.user_stories):
                with st.spinner("Generating acceptance criteria..."):
                    system_prompt = "You are a quality assurance expert. Your task is to generate detailed, testable acceptance criteria for a given set of user stories. For each user story, provide a list of criteria using the 'Given/When/Then' format."
                    llm, messages = create_agent(system_prompt)
                    if llm:
                        st.session_state.acceptance_criteria = run_agent(llm, messages, st.session_state.user_stories)
                        st.session_state.page = "Test Cases"

        if st.session_state.acceptance_criteria:
            st.subheader("Generated Acceptance Criteria")
            st.text_area("Acceptance Criteria", st.session_state.acceptance_criteria, height=500)

            with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as temp_file:
                temp_file.write(st.session_state.acceptance_criteria)
                temp_file_path = temp_file.name

            st.download_button(
                label="Download Acceptance Criteria",
                data=open(temp_file_path, "rb").read(),
                file_name="acceptance_criteria.txt",
                mime="text/plain"
            )

# Tab 5: Test Cases
elif page == "Test Cases":
    st.header("Generate Test Cases")
    if not st.session_state.acceptance_criteria:
        st.warning("Please generate acceptance criteria in the previous tab first.")
    else:
        st.markdown("The AI agent will now create comprehensive test cases based on the criteria.")

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Generate Test Cases", disabled=not st.session_state.acceptance_criteria):
                with st.spinner("Generating test cases..."):
                    test_case_prompt = f"""
                    Given the following user stories and their acceptance criteria, generate a detailed set of test cases.
                    Format the test cases clearly with the following fields for each:
                    - Test Case ID
                    - Test Case Title
                    - Preconditions
                    - Test Steps
                    - Expected Result
                    - Test Data
                    
                    User Stories & Acceptance Criteria:
                    {st.session_state.user_stories}
                    {st.session_state.acceptance_criteria}
                    """
                    system_prompt = "You are a highly skilled QA engineer. Your task is to generate detailed and comprehensive test cases from user stories and acceptance criteria. Be thorough and consider both positive and negative test scenarios."
                    llm, messages = create_agent(system_prompt)
                    if llm:
                        st.session_state.test_cases = run_agent(llm, messages, test_case_prompt)
                        st.session_state.page = "Code"

        if st.session_state.test_cases:
            st.subheader("Generated Test Cases")
            st.text_area("Test Cases", st.session_state.test_cases, height=500)
            
            with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as temp_file:
                temp_file.write(st.session_state.test_cases)
                temp_file_path = temp_file.name

            st.download_button(
                label="Download Test Cases",
                data=open(temp_file_path, "rb").read(),
                file_name="test_cases.txt",
                mime="text/plain"
            )

# Tab 6: Code
elif page == "Code":
    st.header("Generate Code")
    if not st.session_state.test_cases or not st.session_state.project_details.get("Programming Language"):
        st.warning("Please complete the previous steps first.")
    else:
        st.markdown(f"The AI agent will now write the code in **{st.session_state.project_details.get('Programming Language', 'Python')}** based on the project requirements and test cases.")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Generate Code", disabled=not st.session_state.test_cases):
                with st.spinner("Generating code... This may take a moment."):
                    code_prompt = f"""
                    Based on the following project details, user stories, acceptance criteria, and test cases, write a full, runnable program.
                    
                    **Project Details:**
                    {st.session_state.project_details}
                    
                    **User Stories:**
                    {st.session_state.user_stories}
                    
                    **Acceptance Criteria:**
                    {st.session_state.acceptance_criteria}
                    
                    **Test Cases:**
                    {st.session_state.test_cases}
                    
                    **Instructions:**
                    - Write the code in {st.session_state.project_details.get("Programming Language", "Python")}.
                    - Include comments to explain the logic.
                    - Ensure the code addresses all the requirements and passes the provided test cases.
                    - Provide a full, self-contained file.
                    - Do not include any placeholder code or comments.
                    """
                    system_prompt = f"You are a master programmer. Your task is to write high-quality, fully functional, and well-commented code in {st.session_state.project_details.get('Programming Language', 'Python')} based on the provided project requirements. The code should be ready to be deployed."
                    llm, messages = create_agent(system_prompt)
                    if llm:
                        st.session_state.generated_code = run_agent(llm, messages, code_prompt)

        if st.session_state.generated_code:
            st.subheader("Generated Code")
            st.code(st.session_state.generated_code, language=st.session_state.project_details.get("Programming Language", "python").lower())

            with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".txt") as temp_file:
                temp_file.write(st.session_state.generated_code)
                temp_file_path = temp_file.name
            
            st.download_button(
                label="Download Code",
                data=open(temp_file_path, "rb").read(),
                file_name=f"project_code.{st.session_state.project_details.get('Programming Language', 'python').lower()}",
                mime="text/plain"
            )

# Tab 7: Architecture Diagram (New)
elif page == "Architecture Diagram":
    st.header("Generate Architecture Diagram")
    if not st.session_state.project_details.get("Project Name"):
        st.warning("Please fill out the Project Details tab first.")
    else:
        st.markdown("The AI agent will create a mermaid diagram to visualize the software architecture.")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("Generate Diagram"):
                with st.spinner("Generating architecture diagram..."):
                    diagram_prompt = f"""
                    Given the following project details, create a Mermaid script for a software architecture diagram.
                    The diagram should be a high-level overview of the system's components and their interactions.
                    
                    **Project Details:**
                    Project Name: {st.session_state.project_details.get("Project Name")}
                    Business Domain: {st.session_state.project_details.get("Business Domain")}
                    Programming Language: {st.session_state.project_details.get("Programming Language")}
                    
                    **Instructions:**
                    - The diagram should be of type 'graph TD' or 'flowchart'.
                    - The diagram should include components like the User, Frontend, Backend, Database, and any relevant services based on the project details.
                    - Use descriptive labels for nodes and arrows.
                    - Provide only the Mermaid script, starting with 'graph TD' and no extra text or markdown.
                    """
                    system_prompt = "You are a solutions architect. Your task is to generate a Mermaid script for a software architecture diagram based on project details. The output should be a single, valid Mermaid script."
                    llm, messages = create_agent(system_prompt)
                    if llm:
                        mermaid_script = run_agent(llm, messages, diagram_prompt)
                        st.session_state.mermaid_script = mermaid_script
                        
        if st.session_state.mermaid_script:
            st.subheader("Generated Mermaid Script")
            st.code(st.session_state.mermaid_script, language="markdown")
            st.subheader("Architecture Diagram Preview")
            st_mermaid(st.session_state.mermaid_script)
            
            with tempfile.NamedTemporaryFile(mode="w", delete=False, suffix=".md") as temp_file:
                temp_file.write(st.session_state.mermaid_script)
                temp_file_path = temp_file.name
            
            st.download_button(
                label="Download Mermaid Script",
                data=open(temp_file_path, "rb").read(),
                file_name="architecture_diagram.md",
                mime="text/plain"
            )
